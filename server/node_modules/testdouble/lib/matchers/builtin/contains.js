'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('../../wrap/lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _create = require('../create');

var _create2 = _interopRequireDefault(_create);

var _isMatcher = require('../is-matcher');

var _isMatcher2 = _interopRequireDefault(_isMatcher);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _create2.default)({
  name: 'contains',
  matches: function matches(containings, actualArg) {
    if (containings.length === 0) return false;

    return _lodash2.default.every(containings, function (containing) {
      return argumentContains(containing, actualArg);
    });
  }
});


var argumentContains = function argumentContains(containing, actualArg) {
  if (_lodash2.default.isArray(containing)) {
    return _lodash2.default.some(actualArg, function (actualElement) {
      return _lodash2.default.isEqual(actualElement, containing);
    });
  } else if (_lodash2.default.isRegExp(containing)) {
    return containing.test(actualArg);
  } else if ((0, _isMatcher2.default)(containing)) {
    return _lodash2.default.some(actualArg, containing.__matches);
  } else if (_lodash2.default.isObjectLike(containing) && _lodash2.default.isObjectLike(actualArg)) {
    return containsPartialObject(containing, actualArg);
  } else {
    return _lodash2.default.includes(actualArg, containing);
  }
};

var containsPartialObject = function containsPartialObject(containing, actual) {
  return actual != null && _lodash2.default.every(containing, function (val, key) {
    if ((0, _isMatcher2.default)(val)) {
      return val.__matches(actual[key]);
    } else if (_lodash2.default.isObjectLike(val)) {
      return containsPartialObject(val, actual[key]);
    } else {
      return _lodash2.default.isEqual(val, actual[key]);
    }
  });
};