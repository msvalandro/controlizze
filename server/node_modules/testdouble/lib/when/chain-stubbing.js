'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chainStubbing;

var _ensurePromise = require('../log/ensure-promise');

var _ensurePromise2 = _interopRequireDefault(_ensurePromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function chainStubbing(double, completeStubbing) {
  return {
    thenReturn: function thenReturn() {
      for (var _len = arguments.length, stubbedValues = Array(_len), _key = 0; _key < _len; _key++) {
        stubbedValues[_key] = arguments[_key];
      }

      completeStubbing('thenReturn', stubbedValues);
      return double.fake;
    },
    thenCallback: function thenCallback() {
      for (var _len2 = arguments.length, stubbedValues = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        stubbedValues[_key2] = arguments[_key2];
      }

      completeStubbing('thenCallback', stubbedValues);
      return double.fake;
    },
    thenDo: function thenDo() {
      for (var _len3 = arguments.length, stubbedActions = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        stubbedActions[_key3] = arguments[_key3];
      }

      completeStubbing('thenDo', stubbedActions);
      return double.fake;
    },
    thenThrow: function thenThrow() {
      for (var _len4 = arguments.length, stubbedErrors = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        stubbedErrors[_key4] = arguments[_key4];
      }

      completeStubbing('thenThrow', stubbedErrors);
      return double.fake;
    },
    thenResolve: function thenResolve() {
      (0, _ensurePromise2.default)('warn');

      for (var _len5 = arguments.length, stubbedValues = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        stubbedValues[_key5] = arguments[_key5];
      }

      completeStubbing('thenResolve', stubbedValues);
      return double.fake;
    },
    thenReject: function thenReject() {
      (0, _ensurePromise2.default)('warn');

      for (var _len6 = arguments.length, stubbedErrors = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        stubbedErrors[_key6] = arguments[_key6];
      }

      completeStubbing('thenReject', stubbedErrors);
      return double.fake;
    }
  };
}